{
	"query":"mutation {\r\n    # Capture an authorized transaction and return a payload that includes details of\r\n    # the transaction.\r\n    captureTransaction(input: CaptureTransactionInput!) {\r\n        clientMutationId # An identifier used to reconcile requests and responses. 255 characters maximum.\r\n        # The transaction representing the charge on the payment method.\r\n        transaction {\r\n            # amount {}\r\n            # authorizationAdjustments {}\r\n            # billingAddress {}\r\n            channel # If the transaction request was performed through a shopping cart provider or\r\n            # Braintree partner, this field will have a string identifier for that shopping\r\n            # cart provider or partner. For PayPal transactions, this maps to the PayPal\r\n            # account's bn_code.\r\n            createdAt # Date and time when the transaction was created.\r\n            # customFields {}\r\n            # customer {}\r\n            # descriptor {}\r\n            # disbursementDetails {}\r\n            discountAmount # Discount amount that was included in the total transaction amount.\r\n            # disputes {}\r\n            # facilitatorDetails {}\r\n            id # Unique identifier.\r\n            # initialRequestedAuthorizationAmount {}\r\n            # installmentDetails {}\r\n            legacyId # Legacy unique identifier.\r\n            # lineItems {}\r\n            merchantAccountId # The ID of the merchant account that processed this transaction.\r\n            # merchantAddress {}\r\n            merchantId # The ID of the merchant that processed this transaction.\r\n            merchantName # The display name of the merchant that processed this transaction.\r\n            orderId # The order ID for this transaction. For PayPal transactions, the PayPal Invoice\r\n            # ID.\r\n            partialCaptureDetails {\r\n                ... on ChildCapture {\r\n                    __typename\r\n                    # parentAuthorization {}\r\n                }\r\n                ... on ParentAuthorization {\r\n                    __typename\r\n                    # childCaptures {}\r\n                    # totalAmountAuthorized {}\r\n                }\r\n            }\r\n            partiallyAuthorized # Indicates whether the transaction has been authorized for an amount lower than\r\n            # the requested amount.\r\n            paymentInitiatedAt # The transaction date and time as reported by the in-store payment terminal.\r\n            # paymentMethod {}\r\n            paymentMethodSnapshot {\r\n                ... on CreditCardDetails {\r\n                    __typename\r\n                    # billingAddress {}\r\n                    bin # The first 6 digits of the credit card number, known as the Bank Identification\r\n                    # Number. If this card originates from a third party such as a wallet provider,\r\n                    # this BIN may not be present and the PaymentMethodOriginDetails will contain a BIN\r\n                    # instead.\r\n                    # binData {}\r\n                    brand # The display name of the card brand, e.g. \"Visa\" or \"American Express\".\r\n                    # (enum) A static code identifying the card brand.\r\n                    # - AMERICAN_EXPRESS\r\n                    # - CITI\r\n                    # - DINERS\r\n                    # - DISCOVER\r\n                    # - ELO\r\n                    # - HIPER\r\n                    # - HIPERCARD\r\n                    # - INTERNATIONAL_MAESTRO\r\n                    # - JCB\r\n                    # - MASTERCARD\r\n                    # - SOLO\r\n                    # - SWITCH\r\n                    # - UK_MAESTRO\r\n                    # - UNION_PAY\r\n                    # - UNKNOWN\r\n                    # - VISA\r\n                    # - american_express\r\n                    # - citi\r\n                    # - diners\r\n                    # - discover\r\n                    # - elo\r\n                    # - hiper\r\n                    # - hipercard\r\n                    # - international_maestro\r\n                    # - jcb\r\n                    # - mastercard\r\n                    # - solo\r\n                    # - switch\r\n                    # - uk_maestro\r\n                    # - union_pay\r\n                    # - unknown\r\n                    # - visa\r\n                    brandCode\r\n                    cardOnFileNetworkTokenized # Indicates whether the card on file is network tokenized.\r\n                    cardholderName # The cardholder's name.\r\n                    expirationMonth # The month of the expiration date, formatted MM.\r\n                    expirationYear # The year of the expiration date, formatted YYYY.\r\n                    imageUrl # A URL to an image logo representing the card brand.\r\n                    last4 # The last four digits of the card number.\r\n                    # origin {}\r\n                    # threeDSecure {}\r\n                    uniqueNumberIdentifier # An identifier that uniquely represents any credit card number, for cards stored\r\n                    # in a merchant's vault. If the same credit card is added to a merchant's vault\r\n                    # multiple times, each will have the same identifier. This identifier will only be\r\n                    # returned if the field \"origin\" is null.\r\n                }\r\n                ... on CreditCardTransactionDetails {\r\n                    __typename\r\n                    # accountBalance {}\r\n                    # (enum) For combo cards, what account type was used for this specific transaction.\r\n                    # - CREDIT\r\n                    # - DEBIT\r\n                    accountType\r\n                    acquirerReferenceNumber # Reference value assigned to a card transaction once it has been processed.\r\n                    # creditCard {}\r\n                    networkTransactionId # The network transaction identifier provided by the payment network. If this\r\n                    # transaction was created in order to verify a payment method before storing it in\r\n                    # an external vault, then this value can be pased when creating subsequent\r\n                    # transactions with the same payment method.\r\n                    processedWithCardOnFileNetworkToken # Indicates whether the transaction was processed with a card on file network\r\n                    # token.\r\n                }\r\n                ... on CustomActionsPaymentMethodDetails {\r\n                    __typename\r\n                    actionName # The action to be invoked when using the payment method.\r\n                    # fields {}\r\n                }\r\n                ... on LocalPaymentDetails {\r\n                    __typename\r\n                    displayName # Description of the payment method that can be displayed to customers.\r\n                    implicitlyVaultedPaymentMethodId # Payment method identifier for recurrent local payment.\r\n                    # origin {}\r\n                    # (enum) Regional payment method selected by the customer.\r\n                    # - ALIPAY\r\n                    # - BANCONTACT\r\n                    # - BLIK\r\n                    # - BOLETOBANCARIO\r\n                    # - EPS\r\n                    # - GIROPAY\r\n                    # - GRABPAY\r\n                    # - IDEAL\r\n                    # - MULTIBANCO\r\n                    # - MYBANK\r\n                    # - OXXO\r\n                    # - P24\r\n                    # - PAYU\r\n                    # - PAY_UPON_INVOICE\r\n                    # - SATISPAY\r\n                    # - SEPA\r\n                    # - SOFORT\r\n                    # - SWISH\r\n                    # - TRUSTLY\r\n                    # - VERKKOPANKKI\r\n                    # - VIPPS\r\n                    # - WECHAT_PAY\r\n                    type\r\n                }\r\n                ... on PayPalTransactionDetails {\r\n                    __typename\r\n                    # (enum) The application used by the payer to scan the QR code.\r\n                    # - PAYPAL\r\n                    # - VENMO\r\n                    appUsedForScanning\r\n                    authorizationId # If the transaction was successfully authorized, the PayPal ID for the\r\n                    # authorization.\r\n                    captureId # If funds for the transaction have settled, the PayPal ID for the capture of\r\n                    # funds.\r\n                    customField # A string of field/value pairs passed directly to PayPal.\r\n                    description # Description of the transaction that is displayed to customers in PayPal email\r\n                    # receipts.\r\n                    # origin {}\r\n                    # payee {}\r\n                    # payer {}\r\n                    payerStatus # Whether or not the PayPal account has been verified by PayPal.\r\n                    paymentId # The identification value of the payment within PayPal's API.\r\n                    refundId # If the transaction is a refund, the PayPal refund ID.\r\n                    # selectedFinancingOption {}\r\n                    sellerProtectionStatus # Whether or not the transaction qualifies for PayPal Seller Protection.\r\n                    taxId # Payer's tax ID. Only returned for payments from Brazilian accounts.\r\n                    taxIdType # Payer's tax ID type. Only returned for payments from Brazilian accounts. Allowed\r\n                    # values BR_CPF or BR_CNPJ.\r\n                    # transactionFee {}\r\n                    transactionFeeAmount # The fee charged by PayPal for the transaction.\r\n                    transactionFeeCurrencyIsoCode # The currency code for the currency of the PayPal transaction fee.\r\n                }\r\n                ... on SEPADirectDebitTransactionDetails {\r\n                    __typename\r\n                    captureId # If funds for the transaction have settled, the PayPal ID for the capture of\r\n                    # funds.\r\n                    paymentId # PayPal V2 OrderId.\r\n                    # transactionFee {}\r\n                }\r\n                ... on UsBankAccountDetails {\r\n                    __typename\r\n                    # (enum) The bank account type.\r\n                    # - CHECKING\r\n                    # - SAVINGS\r\n                    accountType\r\n                    accountholderName # The name of the accountholder. This is either the business name for a business\r\n                    # account, or the owner's full name for an individual account.\r\n                    # achMandate {}\r\n                    bankName # The name of the bank at which the account exists.\r\n                    last4 # The last four digits of the bank account number.\r\n                    # (enum) The ownership type of the account, i.e. business or personal.\r\n                    # - BUSINESS\r\n                    # - PERSONAL\r\n                    ownershipType\r\n                    routingNumber # The routing number of the bank.\r\n                    verified # Whether or not the bank account has been verified and can be transacted on.\r\n                }\r\n                ... on VenmoAccountDetails {\r\n                    __typename\r\n                    username # The Venmo username, as chosen by the user.\r\n                    venmoUserId # The Venmo user ID.\r\n                }\r\n            }\r\n            # (enum) The processing mode of the transaction.\r\n            # - DEFERRED\r\n            # - ONLINE\r\n            processingMode\r\n            # processorResponse {}\r\n            purchaseOrderNumber # A purchase order identification value you associate with this transaction.\r\n            # refunds {}\r\n            retried # Whether or not the transaction was automatically retried by Braintree's internal\r\n            # systems.\r\n            # retriedParentTransaction {}\r\n            # retriedTransactions {}\r\n            # riskData {}\r\n            # (enum) The type of Strong Customer Authentication Exemption that was requested\r\n            # for this transaction.\r\n            # - LOW_VALUE\r\n            # - SECURE_CORPORATE\r\n            # - TRANSACTION_RISK_ANALYSIS\r\n            # - TRUSTED_BENEFICIARY\r\n            scaExemptionRequested\r\n            # shipping {}\r\n            # (enum) How the transaction was created.\r\n            # - API\r\n            # - CONTROL_PANEL\r\n            # - PAYMENT_READER\r\n            # - RECURRING\r\n            # - UNKNOWN\r\n            source\r\n            # (enum) The current status of this transaction.\r\n            # - AUTHORIZATION_EXPIRED (The transaction spent too much time in the `AUTHORIZED`\r\n            # status and was marked as expired. Expiration [time\r\n            # frames](https://developers.braintreepayments.com/reference/general/statuses#authorization-expired)\r\n            # differ by card type, transaction type, and, in some cases, merchant category.)\r\n            # - AUTHORIZED (The processor authorized the transaction, putting your customer's\r\n            # funds on hold. Your customer may see a pending charge on his or her account.\r\n            # However, before the customer is actually charged and before you receive the\r\n            # funds, you must use the `captureTransaction` mutation. If you do not want to\r\n            # capture the transaction, you should use the `reverseTransaction` mutation to\r\n            # avoid a misuse of authorization fee.)\r\n            # - AUTHORIZING (If a payment remains in a status of `AUTHORIZING`, [contact us for\r\n            # assistance](https://help.braintreepayments.com?issue=TransactionProcessingQuestion).)\r\n            # - FAILED (An error occurred when sending the payment to the downstream processor.\r\n            # See the payment's `statusHistory` for the exact error.)\r\n            # - GATEWAY_REJECTED (The transaction was\r\n            # [rejected](https://articles.braintreepayments.com/control-panel/transactions/gateway-rejections)\r\n            # based on one or more settings or rules in your Braintree gateway. See the\r\n            # transaction's `statusHistory` to determine which resulted in the decline.)\r\n            # - PROCESSOR_DECLINED (The processor declined the transaction while attempting to\r\n            # authorize it. See the transaction's `statusHistory` to determine what reason the\r\n            # processor gave for the decline.)\r\n            # - SETTLED (The payment has been settled. For transactions, this means your\r\n            # customer has been charged and the process of disbursing the funds to your bank\r\n            # account has begun. For refunds, it means that the process of disbursing funds\r\n            # back to the customer has begun.)\r\n            # - SETTLEMENT_CONFIRMED (The transaction was captured partially and will not be\r\n            # submitted to processor for settling. Its child transaction(s) has been\r\n            # successfully captured and will be included in the next settlement batch.)\r\n            # - SETTLEMENT_DECLINED (The processor declined the payment while attempting to\r\n            # capture it. See the payment's `statusHistory` to determine why it wasn't settled.\r\n            # This status is rare, and only certain types of transactions can be affected.)\r\n            # - SETTLEMENT_PENDING (The transaction has not yet fully settled. This status is\r\n            # rare, and will generally resolve to a status of `SETTLED`. Only certain types of\r\n            # transactions can be affected.)\r\n            # - SETTLING (The payment is in the process of being settled. This is a transitory\r\n            # state, and will resolve to a status of `SETTLED`.)\r\n            # - SUBMITTED_FOR_SETTLEMENT (The payment has been successfully captured, and will\r\n            # be included in the next settlement batch, at which time it will become settled.)\r\n            # - VOIDED (The payment has been voided or canceled. For transactions, this means\r\n            # it's no longer authorized, your customer's funds are no longer on hold, and you\r\n            # can't use the `captureTransaction` mutation on this transaction. For refunds, it\r\n            # means the customer will not receive the funds from the refund.)\r\n            status\r\n            # statusHistory {}\r\n            surchargeAmount # Surcharge amount that was included in the total transaction amount.\r\n            # tax {}\r\n        }\r\n    }\r\n}"
}